import { processSdp } from './processSdp'
import adapter from 'webrtc-adapter'

type WebRTCPlusOptions = {
  serverProtocol?: string
  iceTransportPolicy?: string
  iceServers?: RTCIceServer[]
  bidirection?: boolean
  role: string
  signalingBindFunction: Function
  codecs?: {
    video?: string
    audio?: string
  }
}

console.log(adapter.browserDetails.browser, adapter.browserDetails.version)

export default class WebRTCPlus {
  private options: WebRTCPlusOptions

  private peerConnection: RTCPeerConnection | null = null
  private senderList: RTCRtpSender[] = []
  private localStream?: MediaStream[]
  private roomName?: string
  private readyAddIceCandidate?: boolean = false
  private candidateQueue: RTCIceCandidateInit[] = []

  public errorFunction: Function | null = null
  public remoteStreamUpdateFunction: Function | null = null
  public connectStateChangeFunction: Function | null = null

  constructor(options: WebRTCPlusOptions) {
    this.options = Object.assign(
      {
        serverProtocol: window.location.protocol,
        bidirection: true,
        role: 'provider',
      },
      options
    )
  }

  error(callback: Function) {
    this.errorFunction = callback
  }

  remoteStreamUpdate(callback: Function) {
    this.remoteStreamUpdateFunction = callback
  }

  connectStateChange(callback: Function) {
    this.connectStateChangeFunction = callback
  }

  private sendSignal(data: any) {
    if (this.options.signalingBindFunction)
      this.options.signalingBindFunction(data)
  }

  /**
   * 处理收到的信号。
   * @param data - 接收到的信号数据
   */
  async signal(data: any): Promise<void> {
    if (!this.peerConnection || data.role === this.options.role) {
      return
    }

    try {
      switch (data.action) {
        case 'offer':
        case 'answer':
          await this.handleOfferAnswer(data)
          break
        case 'candidate':
          await this.handleCandidate(data)
          break
        case 'close':
          this.close()
          break
        case 'connect':
          this.handleReconnect(data)
          break
        default:
          console.log(`未知的信号动作: ${data.action}`)
      }
    } catch (err) {
      console.error('处理信号时出错:', err)
    }
  }

  private async handleOfferAnswer(data: {
    action: string
    offer?: string
    answer?: string
  }): Promise<void> {
    // @ts-ignore
    const remoteDesc = new RTCSessionDescription(JSON.parse(data[data.action]))
    if (
      this.peerConnection &&
      (this.peerConnection.signalingState === 'stable' ||
        this.peerConnection.signalingState === 'have-local-offer')
    ) {
      await this.peerConnection.setRemoteDescription(remoteDesc)
      this.readyAddIceCandidate = true

      if (data.action === 'offer') {
        const answer = await this.peerConnection.createAnswer()
        await this.peerConnection.setLocalDescription(answer)
        this.sendSignal({
          action: 'answer',
          roomName: this.roomName!,
          answer: JSON.stringify(answer),
          role: this.options.role,
        })
      }
      this.processIceCandidateQueue()
    }
  }

  private async handleCandidate(data: {
    candidate: RTCIceCandidateInit
    role: string
  }): Promise<void> {
    if (!this.peerConnection) return

    const candidate = new RTCIceCandidate(data.candidate)
    if (this.readyAddIceCandidate) {
      await this.peerConnection.addIceCandidate(candidate)
    } else {
      this.candidateQueue.push(data.candidate)
    }
  }

  private async handleReconnect(data: any): Promise<void> {
    // 确认当前的peerConnection实例存在且房间名匹配
    if (!this.peerConnection || this.roomName !== data.roomName) {
      console.log('重连条件不满足，无法执行重连')
      return
    }

    // 检查连接状态，只有在某些状态下才进行重连
    if (
      ['disconnected', 'failed', 'closed'].includes(
        this.peerConnection.connectionState
      )
    ) {
      console.log('正在尝试重连...')

      try {
        // 关闭现有的peerConnection实例
        this.close()

        // 重新初始化peerConnection
        this.init(this.localStream)

        // 根据角色发起新的offer或answer
        if (this.options.role === 'provider' && this.roomName) {
          // 如果是发起方，创建新的offer
          await this.offer(this.roomName)
        } else {
          // 如果是接收方，发送重连请求
          this.sendSignal({
            action: 'reconnect',
            roomName: this.roomName,
            role: this.options.role,
          })
        }
      } catch (error) {
        console.error('重连过程中出现错误:', error)
        if (this.errorFunction)
          this.errorFunction({ code: -1, msg: '重连失败' })
      }
    } else {
      console.log(
        '当前连接状态不需要重连:',
        this.peerConnection.connectionState
      )
    }
  }

  private processIceCandidateQueue(): void {
    if (!this.peerConnection) return

    while (this.candidateQueue.length > 0) {
      this.peerConnection
        .addIceCandidate(this.candidateQueue.shift()!)
        .catch((e) => console.error('添加ICE候选时出错:', e))
    }
  }

  private iniRTCPeerConnection() {
    if (this.peerConnection) {
      try {
        for (const n in this.senderList) {
          this.peerConnection.removeTrack(this.senderList[n])
        }
        this.senderList = []
        this.peerConnection.close()
        this.peerConnection = null
      } catch (err) {
        console.log(err)
      }
    }

    this.peerConnection = new RTCPeerConnection({
      iceTransportPolicy: (this.options.iceTransportPolicy ||
        'all') as RTCIceTransportPolicy,
      iceServers: this.options.iceServers,
      iceCandidatePoolSize: 0,
      // @ts-ignore
      optionalArgument: {
        optional: [
          {
            DtlsSrtpKeyAgreement: true,
          },
          {
            googImprovedWifiBwe: true,
          },
          {
            googScreencastMinBitrate: 300,
          },
          {
            googIPv6: true,
          },
          {
            googDscp: true,
          },
          {
            googCpuUnderuseThreshold: 55,
          },
          {
            googCpuOveruseThreshold: 85,
          },
          {
            googSuspendBelowMinBitrate: true,
          },
          {
            googCpuOveruseDetection: true,
          },
        ],
        mandatory: {},
      },
      candidates: {
        host: true,
        stun: true,
        turn: true,
      },
      iceProtocols: {
        tcp: true,
        udp: true,
      },
    })

    this.peerConnection.oniceconnectionstatechange = (e: Event): any => {
      if (
        this.peerConnection &&
        (this.peerConnection.iceConnectionState === 'failed' ||
          this.peerConnection.iceConnectionState === 'disconnected' ||
          this.peerConnection.iceConnectionState === 'closed')
      ) {
        console.log(this.peerConnection.iceConnectionState)
        if (this.connectStateChangeFunction)
          this.connectStateChangeFunction(
            this.peerConnection.iceConnectionState
          )
        // this.call(localStream, roomName, callback)
      }
    }

    this.peerConnection.onconnectionstatechange = (e) => {
      if (this.peerConnection) {
        if (this.connectStateChangeFunction)
          this.connectStateChangeFunction(this.peerConnection.connectionState)
        // switch (this.peerConnection.connectionState) {
        //   case "new":
        //   case "checking":
        //     setOnlineStatus("Connecting...");
        //     break;
        //   case "connected":
        //     setOnlineStatus("Online");
        //     break;
        //   case "disconnected":
        //     setOnlineStatus("Disconnecting...");
        //     break;
        //   case "closed":
        //     setOnlineStatus("Offline");
        //     break;
        //   case "failed":
        //     setOnlineStatus("Error");
        //     break;
        //   default:
        //     setOnlineStatus("Unknown");
        //     break;
        // }
      }
    }

    this.peerConnection.ontrack = (e) => {
      if (this.remoteStreamUpdateFunction)
        this.remoteStreamUpdateFunction(e.streams, e)
    }

    return this.peerConnection
  }

  init(localStream?: MediaStream[]): void {
    this.peerConnection = this.iniRTCPeerConnection()

    if (localStream) {
      this.localStream = localStream
      if (this.localStream && this.options.bidirection) {
        this.localStream.forEach((stream) => {
          stream.getTracks().forEach((track) => {
            if (this.peerConnection)
              this.senderList.push(this.peerConnection.addTrack(track, stream))
          })
        })
      }
    }
  }

  async offer(roomName: string) {
    if (!this.peerConnection) {
      if (this.errorFunction)
        this.errorFunction({ code: -3, msg: '创建会话异常' })
      return
    }

    if (!roomName) {
      if (this.errorFunction)
        this.errorFunction({ code: -4, msg: '创建通道异常' })
      return
    }

    if (this.roomName && this.roomName !== roomName) {
      if (this.errorFunction)
        this.errorFunction({
          code: -5,
          msg: '已存在同样房间名的会话，请重新初始化会话',
        })
      return
    }
    this.roomName = roomName

    this.peerConnection.onicecandidate = (e) => {
      if (e.candidate) {
        this.sendSignal({
          action: 'candidate',
          roomName,
          role: this.options.role,
          candidate: e.candidate.toJSON(),
        })
      }
    }

    const offer = await this.peerConnection.createOffer({
      offerToReceiveAudio: this.options.bidirection,
      offerToReceiveVideo: this.options.bidirection,
    })

    if (offer.sdp) {
      offer.sdp = processSdp(offer.sdp, {
        video: (this.options.codecs && this.options.codecs.video) || 'VP9',
        audio: (this.options.codecs && this.options.codecs.audio) || 'opus',
      })
    }

    await this.peerConnection.setLocalDescription(offer)

    this.sendSignal({
      action: 'offer',
      roomName,
      offer: JSON.stringify(offer),
      role: this.options.role,
    })
  }

  async answer(roomName: string) {
    if (!this.peerConnection) {
      if (this.errorFunction)
        this.errorFunction({ code: -13, msg: '创建会话异常' })
      return
    }

    if (!roomName) {
      if (this.errorFunction)
        this.errorFunction({ code: -14, msg: '创建通道异常' })
      return
    }

    if (this.roomName && this.roomName !== roomName) {
      if (this.errorFunction)
        this.errorFunction({
          code: -15,
          msg: '已存在同样房间名的会话，请重新初始化会话',
        })
      return
    }
    this.roomName = roomName

    this.peerConnection.onicecandidate = (e) => {
      if (e.candidate) {
        this.sendSignal({
          action: 'candidate',
          roomName,
          role: this.options.role,
          candidate: e.candidate.toJSON(),
        })
      }
    }

    this.sendSignal({
      action: 'connect',
      roomName,
      role: this.options.role,
    })
  }

  async getStats(): Promise<RTCStatsReport | null> {
    return this.peerConnection
      ? this.peerConnection.getStats(null)
      : new Promise((r) => r(null))
  }

  hangup() {
    this.sendSignal({
      action: 'close',
      roomName: this.roomName,
      role: this.options.role,
    })

    this.close()
  }

  close() {
    if (this.peerConnection) {
      try {
        for (const n in this.senderList) {
          this.peerConnection.removeTrack(this.senderList[n])
        }
        this.senderList = []
        this.peerConnection.close()
        this.readyAddIceCandidate = false
        this.peerConnection = null
        this.roomName = ''
      } catch (err) {
        console.log(err)
      }
    }

    if (this.connectStateChangeFunction)
      this.connectStateChangeFunction('closed')
  }
}
