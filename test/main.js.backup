const http = require('http')
const fs = require('fs')
const crypto = require('crypto')

function IndexFileExists () {
  var index = ['index.html', 'index.htm', 'default.html', 'default.htm']
  for (var j in index) {
    if (fs.existsSync(index[j])) {
      return index[j]
    }
  }
}

const server = http.createServer(function (request, response) {
  console.log(request.url)
  if (request.url.includes('?')) request.url = request.url.split('?')[0]
  if (request.url === '/' || request.url === '' || !request.url) {
    request.url = IndexFileExists()
  } else {
    request.url = request.url.substring(1, request.url.length)
  }

  var ext = request.url.substring(request.url.lastIndexOf(".") + 1, request.url.length)
  var contentTypes = {
    'text/html': 'html,htm,shtm',
    'text/css': 'css',
    'text/xml': 'xml',
    'image/gif': 'gif',
    'image/jpeg': 'jpeg,jpg',
    'application/x-javascript': 'js',
    'application/atom+xml': 'atom',
    'application/rss+xml': 'rss',
    'text/mathml': 'mml',
    'text/plain': 'txt',
    'text/vnd.sun.j2me.app-descriptor': 'jad',
    'text/vnd.wap.wml': 'wml',
    'text/x-component': 'htc',
    'image/png': 'png',
    'image/tiff': 'tif,tiff',
    'image/vnd.wap.wbmp': 'wbmp',
    'image/x-icon': 'ico',
    'image/x-jng': 'jng',
    'image/x-ms-bmp': 'bmp',
    'image/svg+xml': 'svg,svgz',
    'image/webp': 'webp',
    'application/java-archive': 'jar,war,ear',
    'application/mac-binhex40': 'hqx',
    'application/msword': 'doc',
    'application/pdf': 'pdf',
    'application/postscript': 'ps,eps,ai',
    'application/rtf': 'rtf',
    'application/vnd.ms-excel': 'xls',
    'application/vnd.ms-powerpoint': 'ppt',
    'application/vnd.wap.wmlc': 'wmlc',
    'application/vnd.google-earth.kml+xml': 'kml',
    'application/vnd.google-earth.kmz': 'kmz',
    'application/x-7z-compressed': '7z',
    'application/x-cocoa': 'cco',
    'application/x-java-archive-diff': 'jardiff',
    'application/x-java-jnlp-file': 'jnlp',
    'application/x-makeself': 'run',
    'application/x-perl': 'pl,pm',
    'application/x-pilot': 'prc,pdb',
    'application/x-rar-compressed': 'rar',
    'application/x-redhat-package-manager': 'rpm',
    'application/x-sea': 'sea',
    'application/x-shockwave-flash': 'swf',
    'application/x-stuffit': 'sit',
    'application/x-tcl': 'tcl,tk',
    'application/x-x509-ca-cert': 'der,pem,crt',
    'application/x-xpinstall': 'xpi',
    'application/xhtml+xml': 'xhtml',
    'application/zip': 'zip',
    'application/octet-stream': 'bin,exe,dll,deb,dmg,eot,iso,img,msi,msp,msm',
    'audio/midi': 'mid,midi,kar',
    'audio/mpeg': 'mp3',
    'audio/ogg': 'ogg',
    'audio/x-m4a': 'm4a',
    'audio/x-realaudio': 'ra',
    'video/3gpp': '3gpp,3gp',
    'video/mp4': 'mp4',
    'video/mpeg': 'mpeg,mpg',
    'video/quicktime': 'mov',
    'video/webm': 'webm',
    'video/x-flv': 'flv',
    'video/x-m4v': 'm4v',
    'video/x-mng': 'mng',
    'video/x-ms-asf': 'asx,asf',
    'video/x-ms-wmv': 'wmv',
    'video/x-msideo': 'avi'
  }

  try {
    (function () {
      for (var n in contentTypes) {
        var type = contentTypes[n].split(',')
        for (var i in type) {
          if (type[i] === ext) {
            contentType = n
            return
          }
        }
      }
    })()

    response.writeHead(200, {
      'Content-Type': contentType
    })

    response.end(fs.readFileSync(request.url))
  } catch (e) {
    response.writeHead(404)
    response.end('404')
  }

})

server.listen(10000)

const sockets = new Set()

server.on('upgrade', function (req, socket, upgradeHead) {
  const head = Buffer.alloc(upgradeHead.length);

  upgradeHead.copy(head);
  let key = req.headers['sec-websocket-key'];
  let shasum = crypto.createHash('sha1');
  const GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'; //协议中规定的校验用GUID,这是算法中要用到的固定字符串
  key = shasum.update(`${key}${GUID}`).digest('base64');

  let headers = [
    'HTTP/1.1 101 Web Socket Protocol Handshake',
    'Upgrade: websocket',
    'Connection: Upgrade',
    'Sec-Websocket-Accept: ' + key,
  ];
  socket.setNoDelay(true);
  socket.write(headers.concat('', '').join('\r\n'));

  socket.on('data', (e) => {
    //接收数据
    console.log(decodeDataFrame(e));
    sockets.add(socket)
    if (sockets.size > 0) {
      sockets.forEach(item => {
        // if (item !== socket) {
        // console.log('发送')
        item.write(encodeDataFrame({
          FIN: 1,
          Opcode: 1,
          PayloadData: decodeDataFrame(e).PayloadData
        }));
        // }
      })
    }
  });
})

//数据帧的解码
function decodeDataFrame (e) {
  var i = 0, j, s, frame = {
    //解析前两个字节的基本数据
    FIN: e[i] >> 7, Opcode: e[i++] & 15, Mask: e[i] >> 7,
    PayloadLength: e[i++] & 0x7F
  };
  //处理特殊长度126和127
  if (frame.PayloadLength == 126)
    frame.length = (e[i++] << 8) + e[i++];
  if (frame.PayloadLength == 127)
    i += 4, //长度一般用四字节的整型，前四个字节通常为长整形留空的
      frame.length = (e[i++] << 24) + (e[i++] << 16) + (e[i++] << 8) + e[i++];
  if (frame.PayloadLength < 126)
    frame.length = frame.PayloadLength
  //判断是否使用掩码
  if (frame.Mask) {
    //获取掩码实体
    frame.MaskingKey = [e[i++], e[i++], e[i++], e[i++]];
    //对数据和掩码做异或运算
    for (j = 0, s = []; j < frame.length; j++)
      s.push(e[i + j] ^ frame.MaskingKey[j % 4]);
  } else s = e.slice(i, frame.PayloadLength); //否则直接使用数据
  //数组转换成缓冲区来使用
  s = Buffer.from(s);
  //如果有必要则把缓冲区转换成字符串来使用
  if (frame.Opcode == 1) s = s.toString();
  //设置上数据部分
  frame.PayloadData = s;
  //返回数据帧
  return frame;
}

//数据帧的编码
function encodeDataFrame (e) {
  var s = [], o = Buffer.from(e.PayloadData), l = o.length;
  //输入第一个字节
  s.push((e.FIN << 7) + e.Opcode);
  //输入第二个字节，判断它的长度并放入相应的后续长度消息
  //永远不使用掩码
  if (l < 126) s.push(l);
  else if (l < 0x10000) s.push(126, (l & 0xFF00) >> 2, l & 0xFF);
  else s.push(
    127, 0, 0, 0, 0, //8字节数据，前4字节一般没用留空
    (l & 0xFF000000) >> 6, (l & 0xFF0000) >> 4, (l & 0xFF00) >> 2, l & 0xFF
  );
  //返回头部分和数据部分的合并缓冲区
  return Buffer.concat([Buffer.from(s), o]);
}